### 의제

이번주까지 기능명세서 토대로 AI, BE는 아키텍처를 구성하고, Design은 와이어 프레임을, FE 크롬확장프로그램 초기 세팅을 하면 좋을 것 같습니다. 그래서 일정을 확실하게 확정하면 좋을 것 같습니다! → 수빈
+아무래도 민감한 정보를 감추는 것, 보안을 강화하는 것이 목적이니 보안 컨설팅 관점에서 해석해봐도 좋을 것 같아요!! 이건 제가 이번주에 시간날 때 틈틈히 정리해보겠습니다. → 수빈

### 📝 회의 내용

- 피드백 질문 정리
    
    **개인 민감 정보 탐지 기술**
    
    - SpaCy NLP 라이브러리
    - Presidio (Microsoft): 오픈소스 PII 탐지기
        - [Presidio](https://github.com/microsoft/presidio)
    - Hugging Face 모델
    - stanza 기반 PII 필터링
        - [stanza](https://stanfordnlp.github.io/stanza/)
    
    **관련 연구**
    
    - DePrompt: PII 비식별화 및 평가 프레임워크
        - [DePrompt](https://arxiv.org/pdf/2408.08930)
    - **RAPT (Privacy-Preserving Prompt Tuning)**
        - **개요**:
            
            LLM에 프롬프트 튜닝 시 로컬에서 민감정보를 차등 프라이버시(DP) 방식으로 보호하는 연구 프로젝트
            
        - **프롬프트 구성**:
            - 민감정보를 포함하는 입력을 로컬에서 전처리 → 비식별화 → 안전한 프롬프트 생성
        - **논문**: https://arxiv.org/abs/2305.06212
        - **특징**: 프롬프트 수준에서 프라이버시 보장
    
    LLM API 호출 시 프롬프트 전송 시 보안
    
    - 사용자 입력 수신 → **전처리(마스킹, 익명화 등)** → LLM 호출
    - 필터 우회 방지: 필터를 우회한 프롬프트가 그대로 전송되지 않도록 **강제 필터 적용**
    - 필터링 여부와 결과를 로그에 기록 (감사/재현 목적)
    
    - **Trustworthy AI 민감정보 제어 프레임워크**
        - https://arxiv.org/pdf/2409.18222
        - **구성**
            - 민감정보 실시간 탐지 및 제어(index: NER, ML 기반 분류, 컨텍스트 분석)
            - 사용자 별 신뢰도/권한 시스템과 연동(역할 기반 RBAC, 속성 기반 ABAC)
            - 의도된 출력 통제 및 마스킹(AI 기반 동적 필터)
        - **주요 기법**
            - **Named Entity Recognition:** 이름, 주소, 주민번호, 계좌 등 실시간 탐지
            - **Text Classification:** 문장 단위로 공개/제한/기밀 등 민감도 레벨 분류
            - **컨텍스트 분석:** 이중적 맥락의 개인정보 여부 판단
            - **적응형 출력 제어:** 권한별로 민감정보 전체·일부·마스킹 출력 차별화
        
    - **Adaptive PII Mitigation Framework**
        - https://arxiv.org/html/2501.12465v1
        
        구성
        
        - NER + ML로 실시간 엔티티 탐지 후, 주변 맥락까지 분석(예: “Smith”가 인명인지 상호명인지 동적 구분)
        - 민감성 등급별 스코어링 & 마스킹·삭제·허용 의사결정(목적/지역 규정 반영)
        - 동적 민감도 추론(예: GDPR 내 공인 vs 비공인, 맥락중심 PII 판단
    
    ## Backend
    
    **시나리오**
    
    - 사용자가 확장 프로그램에 프롬프트 입력
    - `/filter` 호출 → 민감정보 마스킹
    - 필터된 프롬프트를 `/enhance`로 개선
    - 개선된 프롬프트를 `/generate`로 LLM 호출
    - 응답 결과를 확장 프로그램 UI에 출력
    - 사용자가 템플릿 저장 → `/custom-prompts`로 저장
    
    **시스템 구성**
[사용자 (Chrome 확장)]
       │
       ▼
[Frontend (Extension UI)]
       │
       ▼
[API Gateway or Backend Server (REST API)]
       ├── /filter          → 민감정보 필터링
       ├── /enhance         → 프롬프트 개선
       ├── /generate        → LLM API 호출 및 응답
       ├── /templates       → 템플릿 목록 추천
       ├── /custom-prompts  → 사용자 프롬프트 저장/조회
       │
       └─> [LLM API (OpenAI 등)]

필요할 api 목록
Endpoint	메서드	설명
/filter	POST	프롬프트 내 민감 정보 탐지 및 마스킹
/enhance	POST	프롬프트 의도 분석 및 개선된 문장 반환
/generate	POST	개선된 프롬프트로 LLM 응답 생성
/templates	GET	응답 종류에 따른 추천 템플릿 목록 반환
/custom-prompts	GET/POST/DELETE	사용자 지정 템플릿 저장/조회/삭제

**교수님 피드백
단순 필터링 → 규칙을 구현..

개인정보 비식별화/익명화 > 방식에 따른 필터링 정도가 다름

1. 민감정보 대상범위 및 목표를 정해야한다.
2. 민감정보가 어디로 가는게 걱정이 되는건지?
3. 필터링 했을때, 결과의 퀄리티가 낮아지는 부분에 대해 생각해볼 필요가 있음
4. 개인정보 비식별화/익명화 의 방식을 선택할 필요가 있음
5. 단계별 필터링을 추천해주는 방식이 어떨지(사용자가 그 중 선택하는 방식→ 아웃풋에 따라 필터링 정도를 해제할 수 있게 구현)
6. 개인정보 자동 감지해주는 게 있는지는 직접 찾아봐야할 것같다
7. 단계를 나누는 기준은 기존에 있는 기준을 차용해도 될듯
8. 필터링 정도에 따라 난이도가 급격히 올라갈 것이다.

단순한 알고리즘, 새로운 LLM → 이 부분을 담당하는 건 경량화 시키는것이 좋은 평가를 받을 것으로 보인다.

---

1. 목표 - (1 + 필터링 방식)
    1. 단순 필터링보다는 좀 더 세분화한 피드백
        
        ex) 사용자가 입력하려고 하는 프롬프트에 보안 단계 설정하기.
        
        → 사용자가 원하는 정도의 단계로 개인정보 필터링
        
    
    개인정보 매커니즘 찾아보기(비식별화 기법 etc .. )
    
    → 민감도 기준을 찾아서